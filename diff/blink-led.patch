--- /usr/bin/blink-led
+++ /usr/bin/blink-led
@@ -35,7 +35,7 @@
 initial_led_state = "high"
 
 def write_led(value):
-    with open("/sys/class/gpio/gpio40/direction","w") as lf:
+    with open("/sys/class/gpio/gpio14/direction","w") as lf:
         lf.write(value)
 
 def blink_once():
@@ -50,7 +50,7 @@
 
     # Deinit LED GPIO
     subprocess.call("""
-    echo 40 >/sys/class/gpio/unexport
+    echo 14 >/sys/class/gpio/unexport
     echo 214 >/sys/class/gpio/unexport
     echo 243 >/sys/class/gpio/unexport
     echo 261 >/sys/class/gpio/unexport
@@ -75,19 +75,19 @@
 
 # Init GPIO mux for LED control
 subprocess.call("""
-echo 40 >/sys/class/gpio/export
+echo 14 >/sys/class/gpio/export
 echo 214 >/sys/class/gpio/export
 echo 243 >/sys/class/gpio/export
 echo 261 >/sys/class/gpio/export
 echo high >/sys/class/gpio/gpio214/direction
-echo mode0 > /sys/kernel/debug/gpio_debug/gpio40/current_pinmux
+echo mode0 > /sys/kernel/debug/gpio_debug/gpio14/current_pinmux
 echo low >/sys/class/gpio/gpio243/direction
 echo high >/sys/class/gpio/gpio261/direction
 echo low >/sys/class/gpio/gpio214/direction""", shell=True)
 
 # Save current LED value for reverting to proper state at exit
 try:
-    lf =  open("/sys/class/gpio/gpio40/value","r")
+    lf =  open("/sys/class/gpio/gpio14/value","r")
     v = lf.read()
     lf.close()
     if v[0] == '0':
